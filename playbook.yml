---
- name: System update
  hosts: all
  become: true

  tasks:
    - name: Upgrade apt packages
      ansible.builtin.apt:
        upgrade: dist
        update_cache: true

    - name: Check if a reboot is needed
      ansible.builtin.stat:
        path: /var/run/reboot-required
        get_md5: false
      register: reboot_required_file

    - name: Reboot server
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible due to kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists

- name: Docker setup
  hosts: all
  become: true

  vars:
    services:
      - traefik
      - postgres
      - miniflux

  tasks:
    - name: Install repository dependencies
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: true

    - name: Add signing key
      ansible.builtin.apt_key:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        state: present

    - name: Add repository into sources list
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Install docker
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
          - apparmor
        state: present
        update_cache: true

    # - name: Login to ghcr.io
    #   community.docker.docker_login:
    #     registry: ghcr.io
    #     username: "{{ docker_username }}"
    #     password: "{{ docker_password }}"

    - name: Create Traefik docker network
      community.docker.docker_network:
        name: traefiknet

    - name: Create PostgreSQL docker network
      community.docker.docker_network:
        name: postgresnet

    - name: Copy service configuration files
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "~"
        mode: 0644
      loop: "{{ services }}"
      register: changed_services

    - name: Restart changed docker services
      ansible.builtin.shell: |
        cd "{{ item }}"
        docker compose pull
        docker compose up -d --remove-orphans
      loop: "{{ changed_services.results | selectattr('changed', 'equalto', true) | map(attribute='item') | list }}"
      changed_when: true
